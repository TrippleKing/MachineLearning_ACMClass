2020年3月4日

上交ACM班《数据结构》

讲师：俞勇        12:55――13:50

数据结构
一组具有特定关系的同类数据的存储及处理

研究内容：
1.数据之间的逻辑关系；（集合结构、线性结构、树形结构、图形结构）
2.逻辑关系的存储（存储模式）；
3.在某种存储模式下，操作的实现（运算）创建、清除、插入、删除、搜索、更新、访问、遍历

存储实现：
数据存储（节点存储）、关系存储（节点间关系的存储）
数据元素的类型：
基本类型：int、char、long、float...
复合类型：由基本、复合类型组成


关系存储
1.顺序存储
节点存放在一块连续的存储区域中
节点间的关系由节点的存储位置体现
如：线性表中的数组

2.链接存储
节点可分散地存放在一块存储区域中
节点间的关系由指针显式地指出
如：线性结构中的单链表

3.散列（哈希）存储
专用于集合结构的存储方式
节点均匀地分布在一块连续的存储区域中
由一个散列函数将节点和存储位置关联起来

4.索引存储
所有存储节点按照生成的次序连续存放
需要设置一个索引区域表示节点之间的关系


算法分析（评价指标）    14:00――14:50

正确性：能正确地实现预定的功能
易读性：易于阅读和理解，以便调试、修改和扩充
健壮性：面对非法输入不会产生不正确的运算结果
高效率：具有较高的时间和空间性能

算法主要考虑的是时空性能（数据结构主要关注时空性能）
效率分析

影响程序运行时间的因素：
1.问题规模
2.输入数据的分布
3.编译器生成的目标代码
4.计算机系统的性能  （机器速度提速对程序运行时间的影响是有限的）
5.算法的质量        （算法的质量对程序效率影响较大）

时间复杂度
运算量与问题规模之间的关系

数据分布
最好情况；最坏情况；  （极端数据分布情况）

平均情况              （一般数据分布情况）

选择“标准操作”：
将标准操作作为一个抽象的运算单位
一般采用简单语句作为标准操作

算法运算量的计算
在给定的输入下共执行了多少次标准操作

时间复杂度

运行时间函数：
可能是一个很复杂的函数，
同一个问题不同算法会有不同的运行时间函数，
如何从中选取一个很好的算法呢？

时间性能主要考虑
问题规模很大时运行时间问题规模的变化规律

渐进表示法：
不考虑具体的运行时间函数
只考虑运行时间函数的数量级

大O表示法：（最常用）
定义
    如果存在一个正的常数c和自然数N_0
    当N>=N_0时，有T(N)<=c*F(N)成立
    则称T(O) = O(F(N))
读法
    如果一个算法时间复杂性是O(F(N))，读作F(N)级

大Ω表示法：
定义
    T(N)>=c*F(N)
    T(N)=Ω(F(N))

大θ表示法：
定义
    c_1*F(N)<=T(N)<=c_2*F(N)
    T(N)=θ(F(N))

小o表示法
定义
    T(N)=o(F(N))
    T(N)=O(F(N))且T(N)!=θ(F(N))

大O表示法
不需要给出运行时间的精确值
只需要给出一个数量级（当问题规模很大时运行受限于一个函数）

大O表示法的计算规则：
规则1：简单语句（赋值语句等）  为O(1)

规则2：条件语句，执行条件判断的代价，一般为O(1)；条件判断后的语句

规则3：循环语句

规则4：嵌套循环  最内层循环体的运行时间乘所有循环的循环次数

规则5：连续语句  利用求和定理把这些语句的时间复杂性相加


算法优化   15:00――15:35

面向对象数据结构

面向对象的程序设计方法提供创建工具的功能
将数据结构的存储和处理过程封装成一个个工具
使用者只需要知道数据结构的逻辑特性，而不需要知道其逻辑结构是如何存储的、操作是如何实现的
学习数据结构不尽需要知道数据结构的存储和处理方法，还需要知道如何封装更难适合用户的需求

数据结构的描述与实现

数据结构的逻辑特性
每一种数据结构用一个抽象类描述
指出该数据结构提供的操作（接口）

数据结构的实现
每种数据结构可以有若干种实现的方法
每种实现就是一个类

泛型程序设计的实现
数据结构只关注数据元素间的关系是如何保存的
数据元素可以任意类型，C++中的工具称为模板
数据结构中的所有类都是类模板

总结
1.数据结构是一组具有特定关系的同类数据的存储及处理
2.数据结构有四种逻辑结构：集合结构、线性结构、树形结构和图形结构
3.数据结构的操作或运算效率通常用时间复杂度评价，即大O表示法











