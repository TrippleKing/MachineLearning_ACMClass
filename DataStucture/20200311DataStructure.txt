《数据结构》     12:55――14:00

线性结构（节点/数据元素之间的关系是一对一的关系，即“一个接一个”）
具有相同特征的节点构成的有限序列

特点：
1.有且仅有一个首节点
2.有且仅有一个尾节点
3.除首节点外每个节点有且仅有一个直接前驱节点
4.除尾节点外每个节点有且仅有一个直接后继节点

常见的几种线性结构：
1.线性表
仅通过节点之间的相对位置来确定他们之间的相互关系的线性结构

2.时间有序表
按照节点到达的时间先后，作为确定节点之间关系的线性结构

3.排序表
根据节点的关键字值来确定它们之间的相互关系的线性结构

4.频率有序表
根据节点的使用频率确定它们之间的相互关系的线性结构



线性表
定义：一种仅由节点的相互位置确定节点间关系的线性结构

线性表的基本操作：
1.创建一个线性表create()
2.清除一个线性表clear()
3.求线性表的长度length()
4.在第i个位置插入一个元素insert(i,x)
5.删除第i个位置的元素remove(i)
6.搜索某个元素在线性表中是否出现search(x)
7.访问线性表的第i个元素visit(i)
8.遍历线性表运算traverse()

线性表的抽象类是一个类模板
抽象类包括了除create运算以外的所有运算
----create运算由每个线性表类的构造函数完成

增加了一个虚析构函数（非纯虚函数），否则派生类析构函数将不能执行，会导致内存泄露

线性表的顺序实现
用一组连续的存储单元依次存储数据元素，数据元素之间的逻辑关系由元素的存储位置来表示

线性表的顺序存储
保存一个动态数组，需要三个变量：
1.指向线性表元素类型的指针
2.数据规模（容量）
3.数组中的元素个数（表长）

顺序实现的算法分析
length,visit和vlear的实现与表中的元素个数无关――时间复杂度为O(1)

traverse()操作遍历整个表中的所有元素――时间复杂度为O(n)

create操作需要申请一块动态数组的空间，设表为空――时间复杂度为O(1)

insert操作需要移动节点――时间复杂度为O(n)

remove,search,resize――时间复杂度均为O(n)

线性表的顺序实现总结：
1.插入和删除性能不理想：需要移动大量数据
――要保持逻辑次序和物理次序的一致性

2.定位访问的性能很好
――不会改变逻辑次序和物理次序（保持一致性）

结论：比较适合静态的；经常做定位访问的



线性表的链接实现――单链表     14:15――14:50

用一组存储单元分散存储数据元素，数据元素之间的逻辑关系由存储单元中的附加的指针给出

定义
将每个节点放在一个独立的存储单元中，节点间逻辑关系依靠存储单元中附加的指针给出

注意：
――节点的存储单元在物理位置上可以相邻，也可以不相邻
――节点的直接后继节点可由其附加指针来表示

每个节点附加了一个指针字段


头节点：
――通常在表头额外增加一个相同类型的特殊节点
――它们不是线性表中的组成成分

目的：
简化插入和删除操作，头结点的出现，使得在表头位置进行插入和删除和在其他节点位置上完全一致。



双链表  14:50――
双链表中加入头结点和尾节点，目的也是为了简化插入和删除操作


单循环链表
单链表的最后一个节点的next域指向首节点
一般单循环链表不带头结点

双循环链表
首节点中的prev域给出末节点的地址
末节点中的next域给出首节点的地址
一般也不设首尾节点



STL中的线性表实现
标准模板库：Standard Template Library
――C++中数据结构的实现（常用的DS→类）
――这些数据结构被称为容器

STL中线性表的实现有两种容器：
――Vector：线性表的顺序实现
――List：线性表的双链表的实现

迭代器：定位/操作容器中的对象：
――迭代器对象相当于指向容器中对象的指针
――它封装了容器中对象的位置信息

总结
线性表是一种仅由节点的相互位置确定节点间关系的线性结构，它是最常见、最简单的数据结构

线性表可以用顺序实现，也可以用链接实现

可以将一个数据结构设计成一个工具，供其他程序使用

















